All DNA is composed of a series of nucleotides abbreviated as A, C, G, and T, for example: "ACGAATTCCG". When studying DNA, it is sometimes useful to identify repeated sequences within the DNA.

Write a function to find all the 10-letter-long sequences (substrings) that occur more than once in a DNA molecule.

For example,

Given s = "AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT",

Return:
["AAAAACCCCC", "CCCCCAAAAA"].

public class Solution {
    public List<String> findRepeatedDnaSequences(String s) {
        Set<Integer> hashset = new HashSet<Integer>();
        Set<String> dna = new HashSet<String>();
        List<String> result = new LinkedList<String>();
        
        if(s == null || s.length() == 0) {
            return result;
        }
        
        for(int i = 0; i <= s.length() - 10; i++) {
            String sub = s.substring(i, i + 10);
            int encoded = encode(sub);
            
            if(hashset.contains(encoded)) {
                dna.add(sub);
            } else {
                hashset.add(encoded);
            }
        }
        
        for (String d: dna) {
            result.add(d);
        }
        
        return result;
    }

//每两位来存一个基因element，每次*4相当于 << 2
    public int encode(String s) {
        int sum = 0;
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == 'A') {
                sum = sum * 4;
            } else if (s.charAt(i) == 'C') {
                sum = sum * 4 + 1;
            } else if (s.charAt(i) == 'G') {
                sum = sum * 4 + 2;
            } else {
                sum = sum * 4 + 3;
            }
        }
        return sum;
    }
}
