A city's skyline is the outer contour of the silhouette formed by all the buildings in that city when viewed from a distance. Now suppose you are given the locations and height of all the buildings as shown on a cityscape photo (Figure A), write a program to output the skyline formed by these buildings collectively (Figure B).

 Buildings  Skyline Contour
The geometric information of each building is represented by a triplet of integers [Li, Ri, Hi], where Li and Ri are the x coordinates of the left and right edge of the ith building, respectively, and Hi is its height. It is guaranteed that 0 ≤ Li, Ri ≤ INT_MAX, 0 < Hi ≤ INT_MAX, and Ri - Li > 0. You may assume all buildings are perfect rectangles grounded on an absolutely flat surface at height 0.

For instance, the dimensions of all buildings in Figure A are recorded as: [ [2 9 10], [3 7 15], [5 12 12], [15 20 10], [19 24 8] ] .

The output is a list of "key points" (red dots in Figure B) in the format of [ [x1,y1], [x2, y2], [x3, y3], ... ] that uniquely defines a skyline. A key point is the left endpoint of a horizontal line segment. Note that the last key point, where the rightmost building ends, is merely used to mark the termination of the skyline, and always has zero height. Also, the ground in between any two adjacent buildings should be considered part of the skyline contour.

For instance, the skyline in Figure B should be represented as:[ [2 10], [3 15], [7 12], [12 0], [15 10], [20 8], [24, 0] ].

Notes:

The number of buildings in any input list is guaranteed to be in the range [0, 10000].
The input list is already sorted in ascending order by the left x position Li.
The output list must be sorted by the x position.
There must be no consecutive horizontal lines of equal height in the output skyline. For instance, [...[2 3], [4 5], [7 5], [11 5], [12 7]...] is not acceptable; the three lines of height 5 should be merged into one in the final output as such: [...[2 3], [4 5], [12 7], ...]

public class Solution {
    public List<int[]> getSkyline(int[][] buildings) {
        List<int[]> result = new LinkedList<int[]>();
        if(buildings == null || buildings.length == 0 || buildings[0].length == 0) {
            return result;
        }
        
        List<Building> bd = new LinkedList<Building>();
        //创建一个Building class，如果是起始index，把height记为负数，如果是结束index，把height记为正数
        for(int i = 0; i < buildings.length; i++) {
            bd.add(new Building(buildings[i][0], -1*buildings[i][2]));
            bd.add(new Building(buildings[i][1], buildings[i][2]));
        }
        //按照起始时间排序，如果起始时间一样，就用高度排序
        Collections.sort(bd, new Comparator<Building>() {
            public int compare(Building b1, Building b2) {
                return b1.index != b2.index ? b1.index - b2.index : b1.height - b2.height;
            }    
        });
        
        Queue<Integer> pq = new PriorityQueue<Integer>(10000, Collections.reverseOrder());
        //用一个priorityqueue来保证最大高度，如果当前building的height是负数，证明新的building应该加入pq种
        //如果height为正数，代表前面的这个楼处理完成了，把他从pq中拿出去。
        //然后检查当前的最大高度和之前的一不一样，如果不一样，证明到了转折点，加入结果中，然后更新之前最高点，继续比较
        int pre = 0;
        pq.add(0);
        for(Building building : bd) {
            if(building.height < 0) {
                pq.add(-1*building.height);
            } else {
                pq.remove(building.height);
            }
            
            int curr = pq.peek();
            if(pre != curr) {
                result.add(new int[]{building.index, curr});
                pre = curr;
            }
        }
        
        return result;
    }
    
    public class Building {
        int index;
        int height;
        public Building(int index, int height) {
            this.index = index;
            this.height = height;
        }
    }
}
