This is a follow up of Shortest Word Distance. The only difference is now word1 could be the same as word2.

Given a list of words and two words word1 and word2, return the shortest distance between these two words in the list.

word1 and word2 may be the same and they represent two individual words in the list.

For example,
Assume that words = ["practice", "makes", "perfect", "coding", "makes"].

Given word1 = “makes”, word2 = “coding”, return 1.
Given word1 = "makes", word2 = "makes", return 3.

Note:
You may assume word1 and word2 are both in the list.
//如果两个单词一样，就只判断一个list里的距离最小值
public class Solution {
    public int shortestWordDistance(String[] words, String word1, String word2) {
        Map<String, List<Integer>> hm = new HashMap<String, List<Integer>>();
        
        if(words == null || words.length == 0) {
            return Integer.MAX_VALUE;
        }
        for(int i = 0; i < words.length; i++) {
            if(hm.containsKey(words[i])) {
                hm.get(words[i]).add(i);
            } else {
                hm.put(words[i], new LinkedList<Integer>());
                hm.get(words[i]).add(i);
            }
        }
        
        int result = Integer.MAX_VALUE;
        
        List<Integer> l1 = hm.get(word1);
        List<Integer> l2 = hm.get(word2);
        
        if(word1.equals(word2)) {
            for(int i = 0; i < l1.size()-1; i++) {
                result = Math.min(result, l1.get(i+1)-l1.get(i));
            }
            
            return result;
        }
        
        for(int i = 0; i < l1.size(); i++) {
            for(int j = 0; j < l2.size(); j++) {
                result = Math.min(result, Math.abs(l1.get(i) - l2.get(j)));
            }
        }
        
        return result;
    }
}
