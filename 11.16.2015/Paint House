There are a row of n houses, each house can be painted with one of the three colors: red, blue or green. The cost of painting each house with a certain color is different. You have to paint all the houses such that no two adjacent houses have the same color.

The cost of painting each house with a certain color is represented by a n x 3 cost matrix. For example, costs[0][0] is the cost of painting house 0 with color red; costs[1][2] is the cost of painting house 1 with color green, and so on... Find the minimum cost to paint all houses.

Note:
All costs are positive integers.

public class Solution {
    public int minCost(int[][] costs) {
        if(costs == null || costs.length == 0 || costs[0].length == 0) {
            return 0;
        }
        //dp[i][j]是第i个房子用j=0,1,2其中一个颜色来涂。
        int[][] dp = new int[costs.length][3];
        
        dp[0][0] = costs[0][0];
        dp[0][1] = costs[0][1];
        dp[0][2] = costs[0][2];
        
        for(int i = 1; i < costs.length; i++) {
            //用红色就是红色的价格加上前一个用蓝色或者绿色价钱便宜的
            dp[i][0] = costs[i][0] + Math.min(dp[i-1][1], dp[i-1][2]);
            //用蓝色就是蓝色的价格加上前一个用红色或者绿色价钱便宜的
            dp[i][1] = costs[i][1] + Math.min(dp[i-1][0], dp[i-1][2]);
            //用绿色就是绿色的价格加上前一个用红色或者蓝色价钱便宜的
            dp[i][2] = costs[i][2] + Math.min(dp[i-1][0], dp[i-1][1]);
        }
        
        return Math.min(dp[dp.length-1][0], Math.min(dp[dp.length-1][1], dp[dp.length-1][2]));
    }
}
