Given an array of n integers nums and a target, find the number of index triplets i, j, k with 0 <= i < j < k < n that satisfy the condition nums[i] + nums[j] + nums[k] < target.

For example, given nums = [-2, 0, 1, 3], and target = 2.

Return 2. Because there are two triplets which sums are less than 2:

[-2, 0, 1]
[-2, 0, 3]
Follow up:
Could you solve it in O(n2) runtime?

//跟3sum差不多，从后往前找到合法的，end-start个都合法，然后start++继续找
public class Solution {
    public int threeSumSmaller(int[] nums, int target) {
        if(nums == null || nums.length == 0) {
            return 0;
        }
        
        Arrays.sort(nums);
        
        int result = 0;
        
        for(int i = 0; i < nums.length-2; i++) {
            int newT = target - nums[i];
            int start = i+1, end = nums.length-1;
            while(start < end) {
                if(nums[start] + nums[end] >= newT) {
                    end--;
                    continue;
                } 
                result += end-start;
                start++;
            }
        }
        
        return result;
    }
}
