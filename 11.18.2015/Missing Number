Given an array containing n distinct numbers taken from 0, 1, 2, ..., n, find the one that is missing from the array.

For example,
Given nums = [0, 1, 3] return 2.

Note:
Your algorithm should run in linear runtime complexity. Could you implement it using only constant extra space complexity?

Credits:
Special thanks to @jianchao.li.fighter for adding this problem and creating all test cases.

//把理论上的用等差数列求和公式算出来 O(1)
//然后再减去给进的array所有element的和，差就是少的那一个
public class Solution {
    public int missingNumber(int[] nums) {
        if(nums == null || nums.length == 0) {
            return -1;
        }
        int n = nums.length;
        int sum = n*(n+1)/2;
        int add = 0;
        for(Integer num : nums) {
            add += num;
        }
        
        return sum - add;
    }
}
