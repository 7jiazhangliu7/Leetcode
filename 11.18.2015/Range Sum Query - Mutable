Given an integer array nums, find the sum of the elements between indices i and j (i â‰¤ j), inclusive.

The update(i, val) function modifies nums by updating the element at index i to val.
Example:
Given nums = [1, 3, 5]

sumRange(0, 2) -> 9
update(1, 2)
sumRange(0, 2) -> 8
Note:
The array is only modifiable by the update function.
You may assume the number of calls to update and sumRange function is distributed evenly.

public class NumArray {

    class Node {
        int start, end;
        Node left, right;
        int sum;
        public Node (int start, int end) {
            this.start = start;
            this.end = end;
            left = null;
            right = null;
            sum = 0;
        }
    }

    Node root = null;

    public NumArray(int[] nums) {
        root = buildTree(nums, 0, nums.length-1);
    }
    
    public Node buildTree(int[] nums, int start, int end) {
        if(nums == null || nums.length == 0 || start > end) {
            return null;
        }
        
        Node r = new Node(start, end);
        
        if(start == end) {
            r.sum = nums[start];
            return r;
        }
        
        int mid = start + (end - start) / 2;
        
        r.left = buildTree(nums, start, mid);
        r.right = buildTree(nums, mid+1, end);
        
        r.sum = r.left.sum + r.right.sum;
        
        return r;
    }

    void update(int i, int val) {
        update(root, i, val);
    }
    
    public void update(Node root, int i, int val) {
        if(root == null) {
            return;
        }
        
        if(root.start == root.end) {
            root.sum = val;
            return;
        }
        
        int mid = root.start + (root.end - root.start) / 2;
        if(i <= mid) {
            update(root.left, i, val);
        } else {
            update(root.right, i, val);
        }
        root.sum = root.left.sum + root.right.sum;
    }

    public int sumRange(int i, int j) {
        return sumRange(root, i , j);
    }
    
    public int sumRange(Node root, int i, int j) {
        if(root.start == i && root.end == j) {
            return root.sum;
        } else {
            int mid = root.start + (root.end - root.start) / 2;
            if(mid >= j) {
                return sumRange(root.left, i , j);
            } else if (i >= mid+1) {
                return sumRange(root.right, i, j);
            } else {
                return sumRange(root.left, i, mid) + sumRange(root.right, mid+1, j);
            }
        }
    }
}


// Your NumArray object will be instantiated and called as such:
// NumArray numArray = new NumArray(nums);
// numArray.sumRange(0, 1);
// numArray.update(1, 10);
// numArray.sumRange(1, 2);
