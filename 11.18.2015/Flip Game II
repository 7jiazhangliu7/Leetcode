You are playing the following Flip Game with your friend: Given a string that contains only these two characters: + and -, you and your friend take turns to flip two consecutive "++" into "--". The game ends when a person can no longer make a move and therefore the other person will be the winner.

Write a function to determine if the starting player can guarantee a win.

For example, given s = "++++", return true. The starting player can guarantee a win by flipping the middle "++" to become "+--+".

Follow up:
Derive your algorithm's runtime complexity.

public class Solution {
    public boolean canWin(String s) {
        if(s == null || s.length() == 0) {
            return false;
        }
        
        Map<String, Boolean> hm = new HashMap<String, Boolean>();
        
        return helper(s, hm);
    }
    
    public boolean helper(String s, Map<String, Boolean> hm) {
        if(hm.containsKey(s)) {
            return hm.get(s);
        }
        //对每一个以++开始的，我们把++改成--，然后如果改了之后的是false的，表示不能继续了，那么s就是合法的，我们存下来，以后用
        for(int i = 0; i < s.length()-1; i++) {
            if (s.startsWith("++", i)) {
                String t = s.substring(0, i) + "--" + s.substring(i+2);
                
                if(!helper(t, hm)) {
                    hm.put(s, true);
                    return true;
                }
            }
        }
        hm.put(s, false);
        return false;
    }
}
