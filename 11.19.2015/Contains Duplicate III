Given an array of integers, find out whether there are two distinct indices i and j in the array such that the difference between nums[i] and nums[j] is at most t and the difference between i and j is at most k.

public class Solution {
    public boolean containsNearbyAlmostDuplicate(int[] nums, int k, int t) {
        if(nums == null || nums.length == 0 || k < 1 || t < 0) {
            return false;
        }
        
        SortedSet<Long> ss = new TreeSet<Long>();
        
        for(int i = 0; i < nums.length; i++) {
            long leftBound = (long)nums[i] - t;
            long rightBound = (long)nums[i] + t + 1;
            SortedSet<Long> sub = ss.subSet(leftBound, rightBound);
        
            if(!sub.isEmpty()) {
                return true;
            }
            
            ss.add((long)nums[i]);
            
            if(i >= k) {
                ss.remove((long)nums[i-k]);
            }
        }
        
        return false;
    }
}
