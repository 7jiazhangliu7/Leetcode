Say you have an array for which the ith element is the price of a given stock on day i.

Design an algorithm to find the maximum profit. You may complete as many transactions as you like (ie, buy one and sell one share of the stock multiple times) with the following restrictions:

You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).
After you sell your stock, you cannot buy stock on next day. (ie, cooldown 1 day)
Example:

prices = [1, 2, 3, 0, 2]
maxProfit = 3
transactions = [buy, sell, cooldown, buy, sell]

public class Solution {
    public int maxProfit(int[] prices) {
        if(prices == null || prices.length == 0) {
            return 0;
        }
        //建三个array来存， 每一个array[i]代表i天以前一天分别以buy， sell， 或者rest收尾
        int[] buy = new int[prices.length+1];
        int[] sell = new int[prices.length+1];
        int[] rest = new int[prices.length+1];
        buy[0] = Integer.MIN_VALUE;
        for(int i = 1; i <= prices.length; i++) {
            int price = prices[i-1];
            buy[i]  = Math.max(rest[i-1]-price, buy[i-1]); //昨天休息今天卖，消耗了price，或者昨天买了今天啥也不干
            sell[i] = Math.max(buy[i-1]+price, sell[i-1]); //昨天买了今天卖，或者昨天买了一直还没卖
            rest[i] = Math.max(sell[i-1], Math.max(buy[i-1], rest[i-1])); //今天以休息结束，就是看昨天的最大
        }
        int n = prices.length;
        return Math.max(rest[n], Math.max(buy[n], sell[n]));
    }
}
