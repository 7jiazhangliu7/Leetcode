For a undirected graph with tree characteristics, we can choose any node as the root. The result graph is then a rooted tree. Among all possible rooted trees, those with minimum height are called minimum height trees (MHTs). Given such a graph, write a function to find all the MHTs and return a list of their root labels.

Format
The graph contains n nodes which are labeled from 0 to n - 1. You will be given the number n and a list of undirected edges (each edge is a pair of labels).

You can assume that no duplicate edges will appear in edges. Since all edges are undirected, [0, 1] is the same as [1, 0] and thus will not appear together in edges.

Example 1:

Given n = 4, edges = [[1, 0], [1, 2], [1, 3]]

        0
        |
        1
       / \
      2   3
return [1]

Example 2:

Given n = 6, edges = [[0, 3], [1, 3], [2, 3], [4, 3], [5, 4]]

     0  1  2
      \ | /
        3
        |
        4
        |
        5
return [3, 4]

//建一个adjacent list， 来表示图，然后每一轮都删除这一轮所有的叶子节点，然后最后剩下的就是结果
public class Solution {
    public List<Integer> findMinHeightTrees(int n, int[][] edges) {
        List<Integer> result  = new ArrayList<Integer>();
        if(n == 1) {
            result.add(0);
            return result;
        }
        
        List<Set<Integer>> adj = new ArrayList<Set<Integer>>(n);
        
        for (int i = 0; i < n; ++i) adj.add(new HashSet<>());
        
        for(int[] edge : edges) {
            adj.get(edge[0]).add(edge[1]);
            adj.get(edge[1]).add(edge[0]);
        }
        
        for(int i = 0; i < adj.size(); i++) {
            if(adj.get(i).size() == 1) {
                result.add(i);
            }
        }
        
        while(n > 2) {
            n -= result.size();
            List<Integer> leaves  = new ArrayList<Integer>();
            for(Integer i : result) {
                int node = adj.get(i).iterator().next();
                adj.get(node).remove(i);
                if(adj.get(node).size() == 1) {
                    leaves.add(node);
                }
            }
            
            result = leaves;
        }
        
        return result;
    }
}
