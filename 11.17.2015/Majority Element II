Given an integer array of size n, find all elements that appear more than ⌊ n/3 ⌋ times. The algorithm should run in linear time and in O(1) space.

public class Solution {
    public List<Integer> majorityElement(int[] nums) {
        int num1 = 0, num2 = 0, candidate1 = 0, candidate2 = 0;
        
        for(int i = 0; i < nums.length; i++) {
            if(nums[i] == candidate1) {
                num1++;
            } else if(nums[i] == candidate2) {
                num2++;
            } else if (num1 == 0) {
                candidate1 = nums[i];
                num1 = 1;
            } else if (num2 == 0) {
                candidate2 = nums[i];
                num2 = 1;
            } else {
                num1--;
                num2--;
            }
        }
        
        List<Integer> result = new LinkedList<Integer>();
        num1 = 0; num2 = 0;
        for(int i = 0; i < nums.length; i++) {
            if(nums[i] == candidate1) {
                num1++;
            } else if(nums[i] == candidate2) {
                num2++;
            }
        }
        if(num1 > nums.length/3) {
            result.add(candidate1);
        }
        if(num2 > nums.length/3) {
            result.add(candidate2);
        }
        
        return result;
    }
}
