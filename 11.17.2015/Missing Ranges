Given a sorted integer array where the range of elements are [lower, upper] inclusive, return its missing ranges.

For example, given [0, 1, 3, 50, 75], lower = 0 and upper = 99, return ["2", "4->49", "51->74", "76->99"].

public class Solution {
    public List<String> findMissingRanges(int[] nums, int lower, int upper) {
        List<String> result = new LinkedList<String>();
        if(nums == null || lower > upper) {
            return result;
        }

        if(nums.length == 0) {
            if(lower == upper) {
                result.add(lower+"");
                return result;
            }
            result.add(lower+"->"+upper);
            return result;
        }
        
        //先处理如果lower小于第一个element
        if(nums[0]-lower == 1) {
            result.add(""+lower);
        } else if (nums[0]-lower > 1) {
            result.add(lower+"->"+(nums[0]-1));
        }
        //更新lower，算正常的range
        lower = nums[0];
        for(int i = 0; i < nums.length; i++) {
            if(nums[i]-lower <= 1) {
                lower = nums[i];
            } else {
                if(nums[i]-lower == 2) {
                    result.add((lower+1)+"");
                    lower = nums[i];
                } else {
                    result.add((lower+1)+"->"+Math.min(nums[i]-1, upper-1));
                    lower = nums[i];
                    if(upper < nums[i]) {
                        break;
                    }
                }
            }
        }
        //最后处理如果upper大于最后一个element
        if(nums[nums.length-1] < upper) {
            if(upper - nums[nums.length-1] == 1) {
                result.add((upper)+"");
            } else if(upper - nums[nums.length-1] >= 2) {
                result.add((nums[nums.length-1]+1)+"->"+ upper);
            }
        }
        
        return result;
    }
}
